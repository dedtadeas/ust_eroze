var e=class e{constructor(){this._outer=new Map}clear(){this._outer.clear()}get empty(){return this._outer.size===0}get outerSize(){return this._outer.size}get size(){let e=0;for(let t of this._outer.values())e+=t.size;return e}get(e,t){return this._outer.get(e)?.get(t)}getInner(e){return this._outer.get(e)}set(e,t,n){let r=this._outer.get(e);r?r.set(t,n):this._outer.set(e,new Map([[t,n]]))}delete(e,t){let n=this._outer.get(e);n&&(n.delete(t),n.size===0&&this._outer.delete(e))}pop(e,t){let n=this.get(e,t);return this.delete(e,t),n}*outerMap(){for(let e of this._outer)yield e}*values(){for(let e of this._outer.values())yield*e.values()}*[Symbol.iterator](){for(let[e,t]of this._outer)for(let[n,r]of t)yield[e,n,r]}forEach(e){this._outer.forEach((t,n)=>e(t,n))}forAll(e){this._outer.forEach((t,n)=>t.forEach((t,r)=>e(t,n,r)))}copy(){let t=new e;return this.forAll((e,n,r)=>t.set(n,r,e)),t}};export{e as t};