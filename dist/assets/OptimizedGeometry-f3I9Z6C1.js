import{r as e}from"./memoryEstimations-O7VgDRVG.js";var t=2,n=class n{constructor(e=[],t=[]){this.lengths=e??[],this.coords=t??[]}static fromJSON(e){return new n(e.lengths,e.coords)}static fromRect(e){let[t,r,i,a]=e,o=i-t,s=a-r;return new n([5],[t,r,o,0,0,s,-o,0,0,-s])}get isPoint(){return this.lengths.length===0&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce((e,t)=>e+t)}get usedMemory(){return 64+e(this.lengths,this.coords)}area(){let e=0,n=0;if(!this.lengths.length)return 0;for(let r=0;r<this.lengths.length;r++){let i=this.lengths[r];if(i<3)continue;let a=this.coords[t*n],o=this.coords[t*n+1];for(let r=1;r<i;r+=1){let i=this.coords[t*(r+n)],s=this.coords[t*(r+n)+1];e+=-.5*(i-a)*(s+o),a=i,o=s}n+=i}return e}forEachVertex(e){let n=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(let r=0;r<this.lengths.length;r++){let i=this.lengths[r];for(let r=0;r<i;r++)e(this.coords[t*(r+n)],this.coords[t*(r+n)+1]);n+=i}}deltaDecode(){let e=this.clone(),{coords:t,lengths:n}=e,r=0;for(let e of n){for(let n=1;n<e;n++)t[2*(r+n)]+=t[2*(r+n)-2],t[2*(r+n)+1]+=t[2*(r+n)-1];r+=e}return e}clone(e){if(this.lengths.length===0)return new n([],[this.coords[0],this.coords[1]]);let r=(this.lengths.length===0?1:this.lengths.reduce((e,t)=>e+t))*t,i=this.coords.slice(0,r);return e?(e.set(i),new n(this.lengths,e)):new n(Array.from(this.lengths),Array.from(i))}};export{n as t};