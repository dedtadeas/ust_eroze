import{_E as e}from"./index-BqmCqmfp.js";function t(t,n){let r=n.responseType;r?r!==`array-buffer`&&r!==`blob`&&r!==`json`&&r!==`native`&&r!==`native-request-init`&&r!==`text`&&(r=`text`):r=`json`,n.responseType=r;let i=n.signal;return delete n.signal,globalThis.invokeStaticMessage(`request`,{url:t,options:n},{signal:i}).then(async a=>{let o,s,c,l,u;if(a.data)if(a.data instanceof ArrayBuffer){if(!(r!==`json`&&r!==`text`&&r!==`blob`||(o=new Blob([a.data]),r!==`json`&&r!==`text`||(l=await o.text(),r!==`json`)))){try{s=JSON.parse(l||null)}catch(r){let i={...r,url:t,requestOptions:n};throw new e(`request:server`,r.message,i)}if(s.error){let r={...s.error,url:t,requestOptions:n};throw new e(`request:server`,s.error.message,r)}}}else r===`native`&&(a.data.signal=i,c=await fetch(a.data.url,a.data),a.httpStatus=c.status);switch(r){case`blob`:u=o;break;case`json`:u=s;break;case`native`:u=c;break;case`text`:u=l;break;default:u=a.data}return{data:u,httpStatus:a.httpStatus,requestOptions:n,ssl:a.ssl,url:t}})}export{t as execute};