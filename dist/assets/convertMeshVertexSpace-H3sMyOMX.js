import{AE as e,_E as t,iT as n}from"./index-BqmCqmfp.js";import{r}from"./meshCloneUtils-Akm6YUJV.js";import"./meshProperties-Du90n6lL.js";import"./MeshLocalVertexSpace-HjmVAuYa.js";import{t as i}from"./MeshVertexAttributes-Df5_8xlW.js";import"./meshVertexSpaceUtils-Y8FeTLov.js";import"./projectPointToVector-Clou1sfo.js";import"./computeTranslationToOriginAndRotation-BC3OuSky.js";import"./BufferView-DNaZpbJX.js";import"./Util-3rPi0NfK.js";import"./vec3-40WN6G4a.js";import"./vec4-CcFo8HF1.js";import{r as a}from"./vertexSpaceConversion-g9XG_RJW.js";import"./spatialReferenceEllipsoidUtils-DBtdxVkA.js";async function o(o,s,c){await Promise.resolve(),n(c);let l=a(o,s,{useEllipsoid:c?.useEllipsoid});if(!l)throw new t(`meshUtils:convertVertexSpace()`,`Failed to convert to provided vertex space due to projection errors`);return o.clone(r(void 0,{vertexAttributes:new i({...l,uv:e(o.vertexAttributes.uv),color:e(o.vertexAttributes.color)}),vertexSpace:s,transform:null}))}export{o as convertMeshVertexSpace};