import{t as e}from"./geometryEngineBase-Bv_XSz7W.js";var t={convertToGEGeometry:n,exportPoint:i,exportPolygon:o,exportPolyline:c,exportMultipoint:u,exportExtent:f};function n(e,t){return t==null?null:e.convertJSONToGeometry(t)}var r=class{constructor(e,t,n){this.x=e,this.y=t,this.spatialReference=n,this.z=void 0,this.m=void 0}};function i(e,t,n){let i=new r(e.getPointX(t),e.getPointY(t),n),a=e.hasZ(t),o=e.hasM(t);return a&&(i.z=e.getPointZ(t)),o&&(i.m=e.getPointM(t)),i}var a=class{constructor(e,t,n,r){this.rings=e,this.spatialReference=t,this.hasZ=void 0,this.hasM=void 0,n&&(this.hasZ=n),r&&(this.hasM=r)}};function o(e,t,n){return new a(e.exportPaths(t),n,e.hasZ(t),e.hasM(t))}var s=class{constructor(e,t,n,r){this.paths=e,this.spatialReference=t,this.hasZ=void 0,this.hasM=void 0,n&&(this.hasZ=n),r&&(this.hasM=r)}};function c(e,t,n){return new s(e.exportPaths(t),n,e.hasZ(t),e.hasM(t))}var l=class{constructor(e,t,n,r){this.points=e,this.spatialReference=t,this.hasZ=void 0,this.hasM=void 0,n&&(this.hasZ=n),r&&(this.hasM=r)}};function u(e,t,n){return new l(e.exportPoints(t),n,e.hasZ(t),e.hasM(t))}var d=class{constructor(e,t,n,r,i){this.xmin=e,this.ymin=t,this.xmax=n,this.ymax=r,this.spatialReference=i,this.zmin=void 0,this.zmax=void 0,this.mmin=void 0,this.mmax=void 0}};function f(e,t,n){let r=e.hasZ(t),i=e.hasM(t),a=new d(e.getXMin(t),e.getYMin(t),e.getXMax(t),e.getYMax(t),n);if(r){let n=e.getZExtent(t);a.zmin=n.vmin,a.zmax=n.vmax}if(i){let n=e.getMExtent(t);a.mmin=n.vmin,a.mmax=n.vmax}return a}function p(t){return e.extendedSpatialReferenceInfo(t)}function m(n,r,i){return e.clip(t,n,r,i)}function h(n,r,i){return e.cut(t,n,r,i)}function g(n,r,i){return e.contains(t,n,r,i)}function _(n,r,i){return e.crosses(t,n,r,i)}function v(n,r,i,a){return e.distance(t,n,r,i,a)}function y(n,r,i){return e.equals(t,n,r,i)}function b(n,r,i){return e.intersects(t,n,r,i)}function x(n,r,i){return e.touches(t,n,r,i)}function S(n,r,i){return e.within(t,n,r,i)}function C(n,r,i){return e.disjoint(t,n,r,i)}function w(n,r,i){return e.overlaps(t,n,r,i)}function T(n,r,i,a){return e.relate(t,n,r,i,a)}function E(n,r){return e.isSimple(t,n,r)}function D(n,r){return e.simplify(t,n,r)}function O(n,r,i=!1){return e.convexHull(t,n,r,i)}function k(n,r,i){return e.difference(t,n,r,i)}function A(n,r,i){return e.symmetricDifference(t,n,r,i)}function j(n,r,i){return e.intersect(t,n,r,i)}function M(n,r,i=null){return e.union(t,n,r,i)}function N(n,r,i,a,o,s,c){return e.offset(t,n,r,i,a,o,s,c)}function P(n,r,i,a,o=!1){return e.buffer(t,n,r,i,a,o)}function F(n,r,i,a,o,s,c){return e.geodesicBuffer(t,n,r,i,a,o,s,c)}function I(n,r,i,a=!0){return e.nearestCoordinate(t,n,r,i,a)}function L(n,r,i){return e.nearestVertex(t,n,r,i)}function R(n,r,i,a,o){return e.nearestVertices(t,n,r,i,a,o)}function z(t,n,r,i){if(n==null||i==null)throw Error(`Illegal Argument Exception`);let a=e.rotate(n,r,i);return a.spatialReference=t,a}function B(t,n,r){if(n==null||r==null)throw Error(`Illegal Argument Exception`);let i=e.flipHorizontal(n,r);return i.spatialReference=t,i}function V(t,n,r){if(n==null||r==null)throw Error(`Illegal Argument Exception`);let i=e.flipVertical(n,r);return i.spatialReference=t,i}function H(n,r,i,a,o){return e.generalize(t,n,r,i,a,o)}function U(n,r,i,a){return e.densify(t,n,r,i,a)}function W(n,r,i,a,o=0){return e.geodesicDensify(t,n,r,i,a,o)}function G(n,r,i){return e.planarArea(t,n,r,i)}function K(n,r,i){return e.planarLength(t,n,r,i)}function q(n,r,i,a){return e.geodesicArea(t,n,r,i,a)}function J(n,r,i,a){return e.geodesicLength(t,n,r,i,a)}function Y(n,r,i){return r==null||i==null?[]:e.intersectLinesToPoints(t,n,r,i)}function X(t,n){e.changeDefaultSpatialReferenceTolerance(t,n)}function Z(t){e.clearDefaultSpatialReferenceTolerance(t)}var Q=Object.freeze(Object.defineProperty({__proto__:null,buffer:P,changeDefaultSpatialReferenceTolerance:X,clearDefaultSpatialReferenceTolerance:Z,clip:m,contains:g,convexHull:O,crosses:_,cut:h,densify:U,difference:k,disjoint:C,distance:v,equals:y,extendedSpatialReferenceInfo:p,flipHorizontal:B,flipVertical:V,generalize:H,geodesicArea:q,geodesicBuffer:F,geodesicDensify:W,geodesicLength:J,intersect:j,intersectLinesToPoints:Y,intersects:b,isSimple:E,nearestCoordinate:I,nearestVertex:L,nearestVertices:R,offset:N,overlaps:w,planarArea:G,planarLength:K,relate:T,rotate:z,simplify:D,symmetricDifference:A,touches:x,union:M,within:S},Symbol.toStringTag,{value:`Module`}));export{C as A,V as B,w as C,S as D,F as E,y as F,B as I,j as L,m as M,v as N,E as O,p as P,k as R,x as S,h as T,K as _,I as a,b,H as c,Q as d,Y as f,U as g,R as h,N as i,q as j,_ as k,L as l,A as m,G as n,X as o,P as p,J as r,W as s,M as t,Z as u,g as v,D as w,T as x,z as y,O as z};