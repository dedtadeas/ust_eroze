import{CD as e,ET as t,Ea as n,Hx as r,Iy as i,Kb as a,Lw as o,MC as s,Ma as c,Mb as l,Q as u,QT as d,Qw as f,Rw as p,SC as m,Vb as h,X as g,XT as _,Z as v,_E as y,ao as b,cw as x,kC as S,ka as C,oC as w,rt as T,sw as E,ta as D,vE as O}from"./index-BqmCqmfp.js";import"./memoryEstimations-O7VgDRVG.js";import"./OptimizedFeature-Dx4_lHip.js";import"./OptimizedGeometry-f3I9Z6C1.js";import"./OptimizedFeatureSet-DlHqIhoP.js";import"./featureConversionUtils-7vyVIZ6j.js";import"./WhereClause-h6PJ6gjs.js";import"./Relationship-DVNtFbsI.js";import"./GraphQueryStreaming-CxVQo3po.js";import"./WhereClauseCache-BuGDygNN.js";import"./PooledRBush-DKfG2PAm.js";import"./QueryEngineCapabilities-DPTJ40n4.js";import"./clientSideDefaults-CpyaF_rm.js";import"./generateRendererUtils-BgK3c0Qk.js";import"./utils-BcHO3hev.js";import"./cimSymbolUtils-1FVTTBxd.js";import"./gfxUtils-DZoKCRMw.js";import"./utils-5jlQHYup.js";import{_ as k,i as A,n as j,r as M,t as N,v as P}from"./KnowledgeGraphSublayer-B7SWaj3o.js";import{O as F}from"./knowledgeGraphService-DJe2wov6.js";import"./constants-hGT2UJiZ.js";import"./GraphicsLayer-BGvt7_Y1.js";import"./networkEnums-BShtiFSl.js";import"./GPMessage-LPLTXP7P.js";import"./BoundsStore-C1JqKB7k.js";import"./timeSupport-DheFkvFH.js";import"./optimizedFeatureQueryEngineAdapter-8HKICOsa.js";import"./FeatureStore-qdIVrmQw.js";import"./QueryEngine-DjyUd3-5.js";import"./queryUtils-BA7HiGeg.js";import"./quantizationUtils-C5shine1.js";import"./utils-DD1PtgG7.js";import"./utils-C2AeUOnb.js";import"./SnappingCandidate-B_1Ysqys.js";import"./FixedIntervalBinParameters-BO-nZFQ3.js";var I=class extends C(g(v(c(T(u(b(n(l)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(m.ofType(N)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType=`KnowledgeGraphLayer`,this.sublayerIdsCache=new Map,this.tables=new(m.ofType(N)),this.type=`knowledge-graph`,this.url=null,this.addHandles(a(()=>this.layers.concat(this.tables),(e,t)=>this._handleSublayersChange(e,t),h))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:[`Knowledge Graph Layer`]},e)}catch(e){f(e)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await M(this)}async _fetchMetadata(){if(!this.url)throw new y(`knowledge-graph:missing-url`,`KnowledgeGraphLayer must be created with a url`);this.knowledgeGraph=await F(this.url),this._forEachGraphType(e=>{e.name&&this._graphTypeLookup.set(e.name,e)})}async _initializeLayerProperties(){this.originIdOf(`inclusionModeDefinition`)===7?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new A({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){let e=this.definitionSetMap?await k(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(t=>{let n=this._graphTypeLookup.get(t.graphTypeName);n&&!e.namedTypeDefinitions.has(n.name)&&e.namedTypeDefinitions.set(n.name,{useAllData:!0})}),this.setAtOrigin(`inclusionModeDefinition`,e,x(this.originIdOf(`definitionSetMap`)))}_validateInclusionModeDefinition(){let{inclusionModeDefinition:e}=this;if(!e)return;let{namedTypeDefinitions:t}=e;if(t?.size>0)t.forEach((e,n)=>{let r=this._graphTypeLookup.get(n);if(!r)return O.getLogger(this).warn(`A named type, ${n}, was in the inclusion list that wasn't in the data model and will be removed`),void t.delete(n);r.type!==`relationship`&&r.type!==`entity`&&(O.getLogger(this).warn(`A named type, ${n}, was in the inclusion list that wasn't properly modeled and will be removed`),t.delete(n))});else if(!e.generateAllSublayers)throw new y(`knowledge-graph:composite-layer-constructor`,`If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined`)}_setMemberTypes(){let e=[],t=[],{inclusionModeDefinition:n}=this,r=n?.namedTypeDefinitions;!n||n.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],t=this.knowledgeGraph.dataModel?.relationshipTypes??[]):r&&r.size>0&&r.forEach((n,r)=>{let i=this._graphTypeLookup.get(r);switch(i?.type){case`relationship`:t.push(i);break;case`entity`:e.push(i)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=t}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(t=>{e(t)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(let e of this.layers)e.emit(`refresh`,{dataChanged:!0});for(let e of this.tables)e.emit(`refresh`,{dataChanged:!0})}async _handleNewRecords(e){let n=new Set,r=[];for(let i of e)this._graphTypeLookup.has(i.typeName)&&(!1===this.layers.concat(this.tables).some(e=>e.objectType.name===i.typeName)&&(this.dataManager.sublayerCaches.set(i.typeName,new Map),n.add(i.typeName)),t(this.sublayerIdsCache,i.typeName,()=>new Set).add(i.id),r.push(i));this.dataManager.addToLayer(r);for(let e of n){let t=this._graphTypeLookup.get(e);t&&(this._addSublayer(t),t.type===`entity`?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e))}await M(this,Array.from(n)),this._refreshNamedTypes()}_createSublayers(e,t,n){e.forEach(e=>{let r=this._createSublayer(e);n(r)&&t.push(r),this._updateSublayerCaches(e)})}_addSublayer(e){let t=this._createSublayer(e);return t.geometryType?this.layers.push(t):this.tables.push(t),t}_createSublayer(e){return new N({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,t){t.forEach(t=>{t.parentCompositeLayer=this;let n=e.find(e=>e.type===t.graphType&&e.name===t.graphTypeName);n&&(t.objectType=n,this._updateSublayerCaches(n))})}_updateSublayerCaches({name:e}){if(!e)return;let t=this.dataManager.sublayerCaches;t.has(e)||t.set(e,new Map)}_saveUrlAsNewResource(e,t,n,r){e[t]=`<pending>`,n.pendingOperations.push(R(this.inclusionModeDefinition).then(i=>{let a=z(r);e[t]=a.itemRelativeUrl,n.toAdd.push({resource:a,content:{type:`blob`,blob:i},compress:!1,finish:e=>{this.definitionSetMap=e.url}})}))}_displaysAllRecords(e){for(let[,{useAllData:t}]of e.namedTypeDefinitions)if(!t)return!1;return!0}_handleSublayersChange(e,t){t&&(t.forEach(e=>{e.parent=null}),this.removeHandles(`sublayers-owner`)),e&&(e.forEach(e=>{e.parent=this}),this.addHandles([e.on(`after-add`,({item:e})=>{e.parent=this}),e.on(`after-remove`,({item:e})=>{e.parent=null})],`sublayers-owner`))}_layersLoadedFromAuthoritativeItem(){let e=this.originIdOf(`layers`);return e>=3&&e<7}readDefinitionSetMap(e,t,n){return p(e,n)}writeDefinitionSetMap(e,t,n,r){let i=r?.portalItem,a=r?.resources,s=E(r?.origin);if(!i||!a||s==null)return void(e&&(t[n]=o(e,r)));let{inclusionModeDefinition:c}=this;if(!c||this._displaysAllRecords(c))return void(this.definitionSetMap=null);let l=this.originIdOf(`inclusionModeDefinition`);if(l===7||this._namedTypesModified||s<l)this._saveUrlAsNewResource(t,n,a,i);else if(s===l&&e){let s=o(e,r);d(s)?this._saveUrlAsNewResource(t,n,a,i):t[n]=s}}set inclusionModeDefinition(e){this.loadStatus!==`loaded`&&this.loadStatus!==`failed`?this._set(`inclusionModeDefinition`,e):O.getLogger(this).error(`#inclusionModeDefinition`,`inclusionModeDefinition cannot be changed after the layer is loaded.`)}get sublayerCapabilities(){return j(this.knowledgeGraph)}loadLayerAssumingLocalCache(){let e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf(`tables`)===0?this.originIdOf(`layers`)===0?this._createSublayers(e,this.layers,e=>!!e.geometryType):this._updateSublayers(e,this.layers):this.layers=new m,this.tables.length||this.originIdOf(`layers`)===0?this.originIdOf(`tables`)===0?this._createSublayers(e,this.tables,e=>!e.geometryType):this._updateSublayers(e,this.tables):this.tables=new m,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e,n)=>{let r=t(this.sublayerIdsCache,n,()=>new Set);e.members?.forEach(e=>{r.add(e.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();let n=this._graphTypeLookup.get(e);if(!n)throw new y(`knowledge-graph:missing-type`,`The specified type does not exist in the layer's graph data model.`);if(this.dataManager.sublayerCaches.has(e))throw new y(`knowledge-graph:duplicate-type`,`The specified type already exists as a sublayer.`);this.dataManager.sublayerCaches.set(e,new Map),t(this.sublayerIdsCache,e,()=>new Set);let r=this._addSublayer(n);return n.type===`entity`?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await M(this,[e]),this._refreshNamedTypes(),r}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new y(`knowledge-graph:fully-dynamic-membership`,`This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted`);if(!this._graphTypeLookup.get(e))throw new y(`knowledge-graph:missing-type`,`The specified type does not exist in the layer's graph data model.`);if(!this.dataManager.sublayerCaches.has(e))throw new y(`knowledge-graph:duplicate-type`,`The specified type does not exist as a sublayer.`);this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?O.getLogger(this).warn(`This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made`):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new y(`knowledge-graph:fully-dynamic-membership`,`This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted`);if(!this._graphTypeLookup.get(e))throw new y(`knowledge-graph:missing-type`,`The specified type does not exist in the layer's graph data model.`);let t=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!t||t.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new y(`knowledge-graph:duplicate-type`,`The specified type does not exist as a sublayer.`);this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else O.getLogger(this).warn(`This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made`)}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||O.getLogger(this).warn(`This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made`),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&O.getLogger(this).warn(`This Knowledge Graph Layer already uses explicit membership - no conversion was made`),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(let e of this.dataManager.sublayerCaches.keys())t(this.sublayerIdsCache,e,()=>new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();let t=[];for(let n of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.members?.has(n.id)&&t.push(n);this.dataManager.removeFromLayer(t);for(let e of t)this.sublayerIdsCache.get(e.typeName)?.delete(e.id);return this._refreshNamedTypes(),t}};e([s()],I.prototype,`dataManager`,void 0),e([s({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],I.prototype,`definitionSetMap`,void 0),e([r(`definitionSetMap`)],I.prototype,`readDefinitionSetMap`,null),e([w(`definitionSetMap`)],I.prototype,`writeDefinitionSetMap`,null),e([s()],I.prototype,`inclusionModeDefinition`,null),e([s()],I.prototype,`knowledgeGraph`,void 0),e([s({type:m.ofType(N),json:{write:{ignoreOrigin:!0}}})],I.prototype,`layers`,void 0),e([s()],I.prototype,`memberEntityTypes`,void 0),e([s()],I.prototype,`memberRelationshipTypes`,void 0),e([s({type:[`KnowledgeGraphLayer`]})],I.prototype,`operationalLayerType`,void 0),e([s()],I.prototype,`sublayerCapabilities`,null),e([s()],I.prototype,`sublayerIdsCache`,void 0),e([s({type:m.ofType(N),json:{write:{ignoreOrigin:!0}}})],I.prototype,`tables`,void 0),e([s({json:{read:!1}})],I.prototype,`type`,void 0),e([s(D)],I.prototype,`url`,void 0),I=e([S(`esri.layers.KnowledgeGraphLayer`)],I);var L=I;async function R(e){let t=await P(e);return new Blob([t],{type:`application/x-protobuf`})}function z(e){let t=`definitionSetMap-${i()}.dat`,n=_(`knowledgeGraphLayer`,t);return e.resourceFromPath(n)}export{L as default};