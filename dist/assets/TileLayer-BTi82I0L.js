import{Bx as e,CD as t,Ea as n,Hx as r,IT as i,MC as a,Ma as o,Mb as s,Mw as c,Na as l,Ow as u,Q as d,Qw as f,Sw as p,Ux as m,WT as h,X as g,Z as _,_E as v,ao as y,cC as b,eE as x,kC as S,ka as C,kw as w,oC as T,ra as E,rt as D,ta as O}from"./index-BqmCqmfp.js";import"./memoryEstimations-O7VgDRVG.js";import"./OptimizedFeature-Dx4_lHip.js";import"./OptimizedGeometry-f3I9Z6C1.js";import"./OptimizedFeatureSet-DlHqIhoP.js";import"./featureConversionUtils-7vyVIZ6j.js";import{t as k}from"./imageBitmapUtils-B6x9ZCyg.js";import"./urlUtils-CtPsFIu4.js";import"./pbf-CwGh07vG.js";import"./pbfQueryUtils-DOeTJOP2.js";import"./queryUtils-GIY2oFHT.js";import"./query-D8IHih8e.js";import"./executeForIds-CFB4h9Bk.js";import"./QueryTask-vPpZxMGi.js";import"./executeQueryJSON-BAg2ttNX.js";import"./executeQueryPBF-DMb74A0k.js";import"./TileInfoTilemapCache-CuMyse4g.js";import"./TilemapCache-C88wwB2j.js";import{t as A}from"./ArcGISCachedService-B2iHwO5Q.js";import{n as j,r as M,t as N}from"./SublayersOwner-DmyHTzeR.js";import"./sublayerUtils-CdLiCppr.js";var P,F=[`Canvas/World_Dark_Gray_Base`,`Canvas/World_Dark_Gray_Reference`,`Canvas/World_Light_Gray_Base`,`Canvas/World_Light_Gray_Reference`,`Elevation/World_Hillshade`,`Elevation/World_Hillshade_Dark`,`Ocean/World_Ocean_Base`,`Ocean/World_Ocean_Reference`,`Ocean_Basemap`,`Reference/World_Boundaries_and_Places`,`Reference/World_Boundaries_and_Places_Alternate`,`Reference/World_Transportation`,`World_Imagery`,`World_Street_Map`,`World_Topo_Map`],I=P=class extends C(g(N(A(M(D(d(o(y(_(l(n(s)))))))))))){constructor(...e){super(...e),this.listMode=`show`,this.elevationInfo=new E({mode:`on-the-ground`}),this.isReference=null,this.operationalLayerType=`ArcGISTiledMapServiceLayer`,this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type=`tile`,this.url=null}normalizeCtorArgs(e,t){return typeof e==`string`?{url:e,...t}:e}load(e){let t=e==null?null:e.signal;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:[`Map Service`]},e).catch(f).then(()=>this._fetchService(t))),Promise.resolve(this)}get attributionDataUrl(){let e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}get hasAttributionData(){return super.hasAttributionData}readSpatialReference(e,t){return(e||=t.tileInfo?.spatialReference)&&m.fromJSON(e)}writeSublayers(e,t,n,r){if(!this.loaded||!e)return;let i=e.slice().reverse().flatten(({sublayers:e})=>e&&e.toArray().reverse()).toArray(),a=[],o={writeSublayerStructure:!1,...r};i.forEach(e=>{let t=e.write({},o);a.push(t)}),a.some(e=>Object.keys(e).length>1)&&(t.layers=a)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map(e=>h(e).path):null}fetchTile(e,t,n,r={}){let{signal:i}=r,a=this.getTileUrl(e,t,n),o={responseType:`image`,signal:i,query:{...this.refreshParameters}};return p(a,o).then(e=>e.data)}async fetchImageBitmapTile(e,t,n,r={}){let{signal:i}=r;if(this.fetchTile!==P.prototype.fetchTile){let a=await this.fetchTile(e,t,n,r);return k(a,e,t,n,i)}let a=this.getTileUrl(e,t,n),o={responseType:`blob`,signal:i,query:{...this.refreshParameters}},{data:s}=await p(a,o);return k(s,e,t,n,i)}getTileUrl(e,t,n){let r=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,a=i({...this.parsedUrl?.query,blankTile:!r&&null,...this.customParameters,token:this.apiKey}),o=this.tileServers;return`${o&&o.length?o[t%o.length]:this.parsedUrl?.path}/tile/${e}/${t}/${n}${a?`?`+a:``}`}loadAll(){return b(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((t,n)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new v(`tile-layer:unsupported-url`,`use ImageryTileLayer to open a tiled image service`);t({data:this.sourceJSON});return}if(!this.parsedUrl)throw new v(`tile-layer:undefined-url`,`layer's url is not defined`);let r=c(this.parsedUrl.path);if(r!=null&&r.serverType===`ImageServer`)throw new v(`tile-layer:unsupported-url`,`use ImageryTileLayer to open a tiled image service`);p(this.parsedUrl.path,{query:{f:`json`,...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:`json`,signal:e}).then(t,n)}).then(t=>{let n=this.url;if(t.ssl&&(n=this.url=n.replace(/^http:/i,`https:`)),this.sourceJSON=t.data,this.read(t.data,{origin:`service`,url:this.parsedUrl}),this.version===10.1&&!w(n))return this._fetchServerVersion(n,e).then(e=>{this.read({currentVersion:e})}).catch(()=>{})})}_fetchServerVersion(e,t){if(!u(e))return Promise.reject();let n=e.replace(/(.*\/rest)\/.*/i,`$1`)+`/info`;return p(n,{query:{f:`json`,...this.customParameters,token:this.apiKey},responseType:`json`,signal:t}).then(e=>{if(e.data?.currentVersion)return e.data.currentVersion;throw new v(`tile-layer:version-not-available`,`Server did not provide a version`)})}_getMapName(e){let t=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return t?t[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let t;e=e.toLowerCase();for(let n=0,r=F.length;n<r;n++)if(t=F[n],t.toLowerCase().includes(e))return x(`//static.arcgis.com/attribution/`+t);return null}_getDefaultTileServers(e){if(e==null)return[];let t=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,n=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return t||n?[e,e.replace(t?/server\.arcgisonline/i:/services\.arcgisonline/i,t?`services.arcgisonline`:`server.arcgisonline`)]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[L]}};t([a({readOnly:!0})],I.prototype,`attributionDataUrl`,null),t([a({type:[`show`,`hide`,`hide-children`]})],I.prototype,`listMode`,void 0),t([a({json:{read:!0,write:!0}})],I.prototype,`blendMode`,void 0),t([a()],I.prototype,`elevationInfo`,void 0),t([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],I.prototype,`isReference`,void 0),t([a({readOnly:!0,type:[`ArcGISTiledMapServiceLayer`]})],I.prototype,`operationalLayerType`,void 0),t([a({type:Boolean})],I.prototype,`resampling`,void 0),t([a()],I.prototype,`sourceJSON`,void 0),t([a({type:m})],I.prototype,`spatialReference`,void 0),t([r(`spatialReference`,[`spatialReference`,`tileInfo`])],I.prototype,`readSpatialReference`,null),t([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],I.prototype,`path`,void 0),t([a({readOnly:!0})],I.prototype,`sublayers`,void 0),t([T(`sublayers`,{layers:{type:[j]}})],I.prototype,`writeSublayers`,null),t([a({json:{read:!1,write:!1}})],I.prototype,`popupEnabled`,void 0),t([a()],I.prototype,`tileServers`,null),t([e(`tileServers`)],I.prototype,`castTileServers`,null),t([a({readOnly:!0,json:{read:!1}})],I.prototype,`type`,void 0),t([a(O)],I.prototype,`url`,void 0),I=P=t([S(`esri.layers.TileLayer`)],I);var L=Symbol(`default-fetch-tile`);I.prototype.fetchTile[L]=!0;var R=I;export{R as default};