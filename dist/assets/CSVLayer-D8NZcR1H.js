import{CD as e,Cd as t,Fm as n,Fw as r,Hx as i,I as a,Iw as o,Kw as s,La as c,MC as l,Pa as u,Qw as d,Ra as f,Sx as p,Ux as m,WT as h,_E as g,bD as _,fp as v,hC as y,hp as b,kC as x,oC as S}from"./index-BqmCqmfp.js";import"./QueryEngineCapabilities-DPTJ40n4.js";import{i as C}from"./clientSideDefaults-CpyaF_rm.js";var w=Symbol(`isCSVGraphicOrigin`),T,E=class extends c{get[(T=w,v)](){return this.layer}get[b](){return this.layer}get[f](){return this.layer}constructor(e){super(),this[T]=!0,this.type=`csv`,this.layer=e}get id(){return this.layer.id}},D=class extends y{constructor(e){super(e),this.type=`csv`,this.refresh=s(async e=>{await this.load();let{extent:t,timeExtent:n}=await this._connection.invoke(`refresh`,e);return t&&(this.sourceJSON.extent=t),n&&(this.sourceJSON.timeInfo.timeExtent=[n.start,n.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}})}load(e){let t=e==null?null:e.signal;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);let n=await this._connection.invoke(`queryFeatures`,e?e.toJSON():null,t);return u.fromJSON(n)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke(`queryFeatures`,e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke(`queryFeatureCount`,e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke(`queryObjectIds`,e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);let n=await this._connection.invoke(`queryExtent`,e?e.toJSON():null,t);return{count:n.count,extent:p.fromJSON(n.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke(`querySnapping`,e,t)}async queryAttributeBins(e,t={}){return await this.load(),this._connection.invoke(`queryAttributeBins`,e?e.toJSON():null,t)}async _startWorker(e){this._connection=await n(`CSVSourceWorker`,{strategy:_(`feature-layers-workers`)?`dedicated`:`local`,signal:e,registryTarget:this});let{url:t,delimiter:r,fields:i,latitudeField:a,longitudeField:o,spatialReference:s,timeInfo:c}=this.loadOptions,l=await this._connection.invoke(`load`,{url:t,customParameters:this.customParameters,parsingOptions:{delimiter:r,fields:i?.map(e=>e.toJSON()),latitudeField:a,longitudeField:o,spatialReference:s?.toJSON(),timeInfo:c?.toJSON()}},{signal:e});this.locationInfo=l.locationInfo,this.sourceJSON=l.layerDefinition,this.delimiter=l.delimiter}};e([l()],D.prototype,`type`,void 0),e([l()],D.prototype,`loadOptions`,void 0),e([l()],D.prototype,`customParameters`,void 0),e([l()],D.prototype,`locationInfo`,void 0),e([l()],D.prototype,`sourceJSON`,void 0),e([l()],D.prototype,`delimiter`,void 0),D=e([x(`esri.layers.graphics.sources.CSVSource`)],D);function O(e,t){throw new g(t,`CSVLayer (title: ${e.title}, id: ${e.id}) cannot be saved to a portal item`)}var k=class extends a{constructor(...e){super(...e),this.geometryType=`point`,this.capabilities=C(!1,!1),this.delimiter=null,this.editingEnabled=!1,this.fields=null,this.graphicOrigin=new E(this),this.latitudeField=null,this.locationType=`coordinates`,this.longitudeField=null,this.operationalLayerType=`CSV`,this.outFields=[`*`],this.path=null,this.spatialReference=m.WGS84,this.source=null,this.type=`csv`}normalizeCtorArgs(e,t){return typeof e==`string`?{url:e,...t}:e}load(e){let t=e==null?null:e.signal,n=this.loadFromPortal({supportedTypes:[`CSV`],supportsData:!1},e).catch(d).then(async()=>this.initLayerProperties(await this.createGraphicsSource(t)));return this.addResolvingPromise(n),Promise.resolve(this)}set portalItem(e){super.portalItem=e}set fieldConfigurations(e){}get fieldConfigurations(){}get isTable(){return this.loaded&&this.geometryType==null}readWebMapLabelsVisible(e,t){return t.showLabels==null?!!t.layerDefinition?.drawingInfo?.labelingInfo:t.showLabels}writePopupTemplate(e,t,n,r){e&&(t[n]=e.toJSON(r))}set url(e){if(!e)return void this._set(`url`,e);let t=h(e);this._set(`url`,t.path),t.query&&(this.customParameters={...this.customParameters,...t.query})}async createGraphicsSource(e){let t=new D({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField??void 0,longitudeField:this.longitudeField??void 0,spatialReference:this.spatialReference??void 0,timeInfo:this.timeInfo??void 0,url:this.url},customParameters:this.customParameters??void 0});return this._set(`source`,t),await t.load({signal:e}),this.read({locationInfo:t.locationInfo,columnDelimiter:t.delimiter},{origin:`service`,url:this.parsedUrl}),t}queryFeatures(e,n){return this.load().then(()=>this.source.queryFeatures(t.from(e)||this.createQuery())).then(e=>{if(e?.features)for(let t of e.features)t.layer=t.sourceLayer=this,t.origin=this.graphicOrigin;return e})}async queryObjectIds(e,n){return await this.load(),this.source.queryObjectIds(t.from(e)||this.createQuery())}queryFeatureCount(e,n){return this.load().then(()=>this.source.queryFeatureCount(t.from(e)||this.createQuery()))}queryExtent(e,n){return this.load().then(()=>this.source.queryExtent(t.from(e)||this.createQuery()))}read(e,t){super.read(e,t),t&&t.origin===`service`&&this.revert([`latitudeField`,`longitudeField`],`service`)}write(e,t){return super.write(e,{...t,writeLayerSchema:!0})}clone(){throw new g(`csv-layer:clone`,`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`)}async save(e){return O(this,`csv-layer:save`)}async saveAs(e,t){return O(this,`csv-layer:save-as`)}async hasDataChanged(){try{let{dataChanged:e,updates:t}=await this.source.refresh(this.customParameters);return t!=null&&this.read(t,{origin:`service`,url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}_verifyFields(){}_verifySource(){}_hasMemorySource(){return!1}};e([l({readOnly:!0,json:{read:!1,write:!1}})],k.prototype,`capabilities`,void 0),e([l({type:[`,`,` `,`;`,`|`,`	`],json:{read:{source:`columnDelimiter`},write:{target:`columnDelimiter`,ignoreOrigin:!0}}})],k.prototype,`delimiter`,void 0),e([l({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],k.prototype,`editingEnabled`,void 0),e([l({json:{write:!1}})],k.prototype,`fieldConfigurations`,null),e([l({json:{read:{source:`layerDefinition.fields`},write:{target:`layerDefinition.fields`}}})],k.prototype,`fields`,void 0),e([l({readOnly:!0})],k.prototype,`graphicOrigin`,void 0),e([l({type:Boolean,readOnly:!0})],k.prototype,`isTable`,null),e([i(`web-map`,`labelsVisible`,[`layerDefinition.drawingInfo.labelingInfo`,`showLabels`])],k.prototype,`readWebMapLabelsVisible`,null),e([l({type:String,json:{read:{source:`locationInfo.latitudeFieldName`},write:{target:`locationInfo.latitudeFieldName`,ignoreOrigin:!0}}})],k.prototype,`latitudeField`,void 0),e([l({type:[`show`,`hide`]})],k.prototype,`listMode`,void 0),e([l({type:[`coordinates`],json:{read:{source:`locationInfo.locationType`},write:{target:`locationInfo.locationType`,ignoreOrigin:!0,isRequired:!0}}})],k.prototype,`locationType`,void 0),e([l({type:String,json:{read:{source:`locationInfo.longitudeFieldName`},write:{target:`locationInfo.longitudeFieldName`,ignoreOrigin:!0}}})],k.prototype,`longitudeField`,void 0),e([l({type:[`CSV`]})],k.prototype,`operationalLayerType`,void 0),e([l()],k.prototype,`outFields`,void 0),e([l({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],k.prototype,`path`,void 0),e([S(`popupTemplate`)],k.prototype,`writePopupTemplate`,null),e([l({json:{read:!1},cast:null,type:D,readOnly:!0})],k.prototype,`source`,void 0),e([l({json:{read:!1},value:`csv`,readOnly:!0})],k.prototype,`type`,void 0),e([l({json:{read:r,write:{isRequired:!0,ignoreOrigin:!0,writer:o}}})],k.prototype,`url`,null),k=e([x(`esri.layers.CSVLayer`)],k);var A=k;export{A as default};